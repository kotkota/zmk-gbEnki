/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DFLT   0
#define GAME   1
#define NUMB   2
#define SYMB   3
#define MEDIA  4

&lt { quick_tap_ms = <200>; };

&mt {
    hold-trigger-on-release;
    flavor = "balanced";
    quick-tap-ms = <250>;
};

&soft_off { hold-time-ms = <2000>; };

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&sl { release-after-ms = <2000>; };

/ {
    chosen { zmk,physical-layout = &default_layout; };

    combos {
        compatible = "zmk,combos";

        comma {
            bindings = <&comma_space>;
            key-positions = <26 27>;
            layers = <0>;
        };

        period {
            bindings = <&period_space>;
            key-positions = <27 28>;
            layers = <0>;
        };

        t_game {
            bindings = <&tog 1>;
            key-positions = <35 24>;
            layers = <0 1>;
        };

        toggle_ru {
            bindings = <&kp LG(LC(LA(LS(J))))>;
            key-positions = <16 19>;
            layers = <0>;
            timeout-ms = <80>;
            require-prior-idle-ms = <80>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <12 13>;
            timeout-ms = <80>;
            layers = <0>;
        };

        eqquo {
            bindings = <&equals_qoute>;
            key-positions = <28 29>;
            layers = <0>;
        };

        sch {
            bindings = <&kp LA(I)>;
            key-positions = <8 9>;
            layers = <0>;
        };

        harden_sign {
            bindings = <&kp LA(M)>;
            key-positions = <31 30>;
            layers = <0>;
        };

        yo {
            bindings = <&kp LA(T)>;
            key-positions = <4 5>;
            layers = <0>;
        };

        excl {
            bindings = <&kp N1>;
            key-positions = <1 13>;
            layers = <0>;
        };

        at {
            bindings = <&kp N2>;
            key-positions = <2 14>;
            layers = <0>;
        };

        hash {
            bindings = <&kp N3>;
            key-positions = <3 15>;
            layers = <0>;
        };

        doll {
            bindings = <&kp N4>;
            key-positions = <4 16>;
            layers = <0>;
        };

        percnt {
            bindings = <&kp N5>;
            key-positions = <17 5>;
            layers = <0>;
        };

        caret {
            bindings = <&kp N6>;
            key-positions = <6 18>;
        };

        questn {
            bindings = <&kp N7>;
            key-positions = <7 19>;
        };

        asterisk {
            bindings = <&kp N8>;
            key-positions = <8 20>;
        };

        lpar {
            bindings = <&kp N9>;
            key-positions = <9 21>;
        };

        rpar {
            bindings = <&kp N0>;
            key-positions = <10 22>;
        };

        dash {
            bindings = <&mt LA(LS(MINUS)) MINUS>;
            key-positions = <20 19>;
        };

        soff {
            bindings = <&soft_off>;
            key-positions = <25 17>;
        };

        under {
            bindings = <&mt LA(LS(COMMA)) LS(MINUS)>;
            key-positions = <7 8>;
            layers = <0>;
        };

        bullet {
            bindings = <&kp LA(LS(GRAVE))>;
            key-positions = <11 23>;
        };

        dquo {
            bindings = <&kp LS(GRAVE)>;
            key-positions = <32 33>;
        };

        grave {
            bindings = <&kp LA(GRAVE)>;
            key-positions = <33 34>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <28 29>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <8 9>;
            layers = <2>;
        };

        bsp {
            bindings = <&kp BSPC>;
            key-positions = <8 7>;
            layers = <2>;
        };

        toggle_en {
            bindings = <&kp LG(LC(LA(LS(K))))>;
            key-positions = <15 20>;
            timeout-ms = <80>;
            require-prior-idle-ms = <80>;
            layers = <0>;
        };

        quo {
            bindings = <&kp GRAVE>;
            key-positions = <32 31>;
        };

        mute {
            bindings = <&kp K_MUTE>;
            key-positions = <11 10>;
            layers = <4>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <11 10>;
            layers = <0 2 3>;
        };
    };

    macros {
        comma_space: comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(COMMA)) &kp SPACE>;
        };

        period_space: period_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(PERIOD)) &kp SPACE &sk LSHIFT>;
        };

        meh: meh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LEFT_SHIFT))>;
        };

        upd_fw_l: upd_fw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LA(LS(NUMBER_1)))) &bootloader>;
        };

        upd_fw_r: upd_fw_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LA(LS(NUMBER_2)))) &bootloader>;
        };

        equals_qoute: equals_qoute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp LS(GRAVE) &kp LS(GRAVE) &kp LEFT>;
        };
    };

    behaviors {
        /omit-if-no-ref/

        cmd_to_shift: cmd_to_shift {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&mtl LCMD F>, <&mtl LSHIFT F>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        playnp: play_next_previous_media {
            compatible = "zmk,behavior-tap-dance";
            label = "PLAYNP";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PP>, <&kp C_NEXT>, <&kp C_PREV>;
        };

        mt_hp: mod-tap_hold-preffered {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-on-release;
        };

        mtl: hrm-left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39 38 37 36 12 24>;
        };

        mtr: hrm-right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LS(LCMD) ESC       &kp Q          &kp W         &kp E            &kp R          &kp T                      &kp Y                    &kp U        &kp I            &kp O         &kp P             &kp BACKSLASH
&mt LA(LS(LCTRL)) TAB  &mtl LSHIFT A  &mtl LCTRL S  &mtl LALT D      &cmd_to_shift  &mtl RC(RA(RS(LCMD))) G    &mtr RC(RA(RS(RCMD))) H  &mtr RCMD J  &mtr RALT K      &mtr RCTRL L  &mtr RSHIFT SEMI  &mt RS(RA(RCTRL)) LBKT
&lt 4 GRAVE            &kp Z          &kp X         &kp C            &kp V          &kp B                      &kp N                    &kp M        &kp COMMA        &kp PERIOD    &kp SLASH         &lt 4 RBKT
                                                    &lt 3 BACKSPACE  &lt 2 SPACE    &lt 5 ENTER                &lt 5 ENTER              &lt 2 SPACE  &lt 3 BACKSPACE
            >;

            display-name = "Default";
        };

        game {
            bindings = <
&kp ESCAPE   &kp TAB    &kp Q  &kp W    &kp E      &kp R    &kp Y          &kp U         &kp I         &kp O    &kp P     &kp LBKT
&kp B        &kp LSHFT  &kp A  &kp S    &kp D      &kp F    &kp H          &kp J         &kp K         &kp L    &kp SEMI  &kp SQT
&lt 2 ENTER  &kp LCTRL  &kp Z  &kp X    &kp C      &kp V    &kp N          &kp M         &kp COMMA     &kp DOT  &kp FSLH  &kp BSLH
                               &mt H T  &kp SPACE  &kp G    &kp BACKSPACE  &kp LEFT_ALT  &kp LEFT_GUI
            >;

            label = "Game";
        };

        num {
            bindings = <
&trans         &kp KP_MULTIPLY       &kp KP_N7        &kp KP_N8       &kp KP_N9       &kp PLUS     &kp HOME  &kp LA(LEFT)     &kp UP       &kp LA(RIGHT)  &kp PG_UP     &none
&trans         &mt LSHIFT KP_DIVIDE  &mt LCTRL KP_N4  &mt LALT KP_N5  &mt LCMD KP_N6  &kp MINUS    &kp END   &kp LEFT         &kp DOWN     &kp RIGHT      &kp PG_DN     &none
&mt RBKT LBKT  &kp KP_EQUAL          &kp KP_N1        &kp KP_N2       &kp KP_N3       &kp KP_N0    &none     &kp RG(RS(TAB))  &kp RG(TAB)  &kp LG(LBKT)   &kp LG(RBKT)  &trans
                                                      &trans          &trans          &trans       &trans    &trans           &trans
            >;

            display-name = "Numbers/Nav";
        };

        symb {
            bindings = <
&kp UNDER          &kp N1             &kp N2         &kp N3            &kp N4          &kp N5            &kp KP_MULTIPLY  &kp KP_N7       &kp KP_N8       &kp KP_NUMBER_9  &kp KP_PLUS         &trans
&kp LA(LS(COMMA))  &kp N6             &kp N7         &kp N8            &kp N9          &kp N0            &kp KP_DIVIDE    &mt RCMD KP_N4  &mt RALT KP_N5  &mt RCTRL KP_N6  &mt RSHFT KP_MINUS  &trans
&kp LA(LS(GRAVE))  &kp LS(LA(EQUAL))  &kp LS(LA(L))  &kp LS(LA(SEMI))  &kp LA(LS(N9))  &kp LS(LA(N0))    &kp KP_N0        &kp KP_N1       &kp KP_N2       &kp KP_N3        &kp KP_EQUAL        &trans
                                                     &trans            &trans          &trans            &trans           &trans          &trans
            >;

            display-name = "Symbols/Numbers";
        };

        media {
            bindings = <
&kp C_POWER             &kp LS(LG(N1))     &kp LS(LG(N2))     &kp LG(LS(N3))     &kp LS(LG(N4))     &kp LS(LG(N5))       &bt BT_PRV     &bt BT_NXT     &none          &playnp  &kp C_VOLUME_DOWN  &kp C_VOL_UP
&mt LC(RIGHT) LC(LEFT)  &mt LC(N6) LC(N1)  &mt LC(N7) LC(N2)  &mt LC(N8) LC(N3)  &mt LC(N9) LC(N4)  &mt LC(N0) LC(N5)    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &none    &none              &none
&soft_off               &kp LG(Z)          &kp LG(X)          &kp LG(C)          &kp LG(V)          &kp LS(LG(Z))        &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 3  &none    &none              &studio_unlock
                                                              &upd_fw_l          &bootloader        &check_bat           &check_bat     &bootloader    &upd_fw_r
            >;

            display-name = "Buttons/Media";
        };

        sticky {
            bindings = <
&trans      &trans     &trans     &trans    &trans    &trans                   &trans                 &trans    &trans    &trans     &trans     &trans
&caps_word  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &sk LS(LG(LA(LCTRL)))    &sk LS(LG(LA(LCTRL)))  &sk RGUI  &sk RALT  &sk RCTRL  &sk RSHFT  &trans
&trans      &trans     &trans     &trans    &trans    &trans                   &trans                 &trans    &trans    &trans     &trans     &trans
                                  &trans    &sl 2     &trans                   &trans                 &trans    &trans
            >;
        };
    };
};
