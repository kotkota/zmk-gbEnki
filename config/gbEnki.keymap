/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

#define DFLT   0
#define RU     1
#define GAME   2
#define NUMB   3
#define FUNC   4
#define MEDIA  5
#define STCKY  6
#define SYS    7

&lt { quick-tap-ms = <250>; };

&mt {
    hold-trigger-on-release;
    flavor = "balanced";
    quick-tap-ms = <250>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    chosen { zmk,physical-layout = &default_layout; };

    combos {
        compatible = "zmk,combos";

        combo_toggle_game {
            bindings = <&tog 2>;
            key-positions = <35 24>;
            layers = <0 2 1>;
        };

        combo_leader_key {
            bindings = <&kp F13>;
            key-positions = <14 21>;
            layers = <0 1>;
            timeout-ms = <80>;
            require-prior-idle-ms = <120>;
        };

        combo_ha_sch {
            bindings = <&kp LBKT>;
            key-positions = <8 9>;
            layers = <1>;
        };

        combo_harden_sign {
            bindings = <&kp RBKT>;
            key-positions = <31 32>;
            layers = <1>;
        };

        combo_yo {
            bindings = <&kp BSLH>;
            key-positions = <4 5>;
            layers = <1>;
        };

        combo_excl {
            bindings = <&mt LA(N1) LS(N1)>;
            key-positions = <1 13>;
            layers = <0 1>;
        };

        combo_at {
            bindings = <&mt LA(N2) LS(N2)>;
            key-positions = <2 14>;
            layers = <0 1>;
        };

        combo_hash {
            bindings = <&mt LA(N3) LS(N3)>;
            key-positions = <3 15>;
            layers = <0 1>;
        };

        combo_doll {
            bindings = <&mt LA(N4) LS(N4)>;
            key-positions = <4 16>;
            layers = <0 1>;
        };

        combo_percnt {
            bindings = <&mt LA(N5) LS(N5)>;
            key-positions = <17 5>;
            layers = <0 1>;
        };

        combo_caret {
            bindings = <&mt LA(N6) LS(N6)>;
            key-positions = <6 18>;
            layers = <0 1>;
        };

        combo_ampersand {
            bindings = <&mt LA(N7) LS(N7)>;
            key-positions = <7 19>;
            layers = <0 1>;
        };

        combo_asterisk {
            bindings = <&mt LA(N8) LS(N8)>;
            key-positions = <8 20>;
            layers = <0 1>;
        };

        combo_lpar {
            bindings = <&mt LA(N9) LS(N9)>;
            key-positions = <9 21>;
            layers = <0 1>;
        };

        combo_rpar {
            bindings = <&mt LA(N0) LS(N0)>;
            key-positions = <10 22>;
            layers = <0 1>;
        };

        combo_under_ellipsis {
            bindings = <&mt LA(SEMI) LS(MINUS)>;
            key-positions = <8 7>;
            layers = <0 1>;
        };

        combo_equal {
            bindings = <&mt PLUS EQUAL>;
            key-positions = <18 19>;
            require-prior-idle-ms = <180>;
            layers = <0 1>;
        };

        combo_dash {
            bindings = <&mt LA(LS(MINUS)) MINUS>;
            key-positions = <20 19>;
            require-prior-idle-ms = <180>;
            layers = <0 1>;
        };

        combo_quo {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <32 31>;
            layers = <0>;
        };

        combo_dquo {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <32 33>;
            layers = <0>;
        };

        combo_dquo_ru {
            bindings = <&kp LS(N2)>;
            key-positions = <32 33>;
            layers = <1>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <33 34>;
            layers = <0>;
        };

        combo_del {
            bindings = <&kp DEL>;
            key-positions = <8 9>;
            layers = <3>;
        };

        combo_bsp {
            bindings = <&kp BSPC>;
            key-positions = <7 8>;
            layers = <3>;
        };

        combo_mute {
            bindings = <&kp C_MUTE>;
            key-positions = <11 10>;
            layers = <5>;
        };

        combo_copy_cut {
            bindings = <&mt LG(X) LG(C)>;
            key-positions = <2 3>;
            layers = <0 1>;
        };

        combo_paste {
            bindings = <&mt LA(LC(V)) LG(V)>;
            key-positions = <3 4>;
            layers = <0 1>;
        };

        combo_html_tag {
            bindings = <&html_tag 0 0>;
            key-positions = <16 17>;
            layers = <0 1>;
        };

        combo_eq_quo {
            bindings = <&mt LS(LA(LC(J))) LA(LC(J))>;
            key-positions = <28 29>;
            layers = <0 1>;
        };

        combo_sk_lshift {
            bindings = <&sk LSHFT>;
            key-positions = <13 26>;
            layers = <0 1>;
        };

        combo_sk_rshift {
            bindings = <&sk RSHFT>;
            key-positions = <33 22>;
            layers = <0 1>;
        };

        combo_par {
            bindings = <&par>;
            key-positions = <25 26>;
            layers = <3>;
        };

        combo_bkt {
            bindings = <&bkt>;
            key-positions = <26 27>;
            layers = <3>;
        };

        combo_brc {
            bindings = <&brc>;
            key-positions = <27 28>;
            layers = <3>;
        };

        combo_comma {
            bindings = <&smart_comma 0 COMMA>;
            key-positions = <26 27>;
            layers = <0>;
        };

        combo_comma_ru {
            bindings = <&smart_comma_ru 0 RS(NUMBER_6)>;
            key-positions = <26 27>;
            layers = <1>;
        };

        combo_dot {
            bindings = <&smart_dot 0 DOT>;
            key-positions = <27 28>;
            layers = <0>;
        };

        combo_dot_ru {
            bindings = <&smart_dot_ru 0 RS(NUMBER_7)>;
            key-positions = <28 27>;
            layers = <1>;
        };

        combo_fwslash_question {
            bindings = <&kp SLASH>;
            key-positions = <33 34>;
            layers = <1>;
        };

        combo_ru_on {
            bindings = <&ru_on>;
            key-positions = <15 28>;
            layers = <1 0>;
        };

        combo_ru_off {
            bindings = <&ru_off>;
            key-positions = <27 16>;
            layers = <1 0>;
        };
    };

    macros {
        upd_fw_l: upd_fw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LA(LS(NUMBER_1)))) &bootloader>;
        };

        upd_fw_r: upd_fw_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LA(LS(NUMBER_2)))) &bootloader>;
        };

        equals_qoute: equals_qoute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT>;
        };

        par: par {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            tap-ms = <50>;
        };

        bkt: bkt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 200>,
                <&ru_off>,
                <&macro_wait_time 20>,
                <&kp LBKT &kp RBKT &kp LEFT>;

            label = "BKT";
        };

        brc: brc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 200>,
                <&ru_off>,
                <&macro_wait_time 20>,
                <&kp LBRC &kp RBRC &kp LEFT>;
        };

        comma_space: comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
        };

        dot_space: dot_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE>;
        };

        comma_space_ru: comma_space_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_6) &kp SPACE>;
        };

        dot_space_ru: dot_space_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N7) &kp SPACE>;
        };

        ru_on: to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog_on 1 &kp LS(LA(LC(LG(N))))>;
        };

        ru_off: to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog_off 1 &kp LS(LA(LC(LG(M))))>;
        };

        html_tag_open: html_tag_open {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 200>,
                <&ru_off>,
                <&macro_wait_time 20>,
                <&kp LESS_THAN &kp GREATER_THAN &kp LEFT>;

            label = "HTML_TAG_OPEN";
        };

        html_tag_close: html_tag {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 200>,
                <&ru_off>,
                <&macro_wait_time 20>,
                <&kp LESS_THAN &kp GREATER_THAN &kp LEFT &kp SLASH>;
        };
    };

    behaviors {
        /omit-if-no-ref/

        playnp: play_next_previous_media {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PP>, <&kp C_NEXT>, <&kp C_PREV>;
        };

        mtl: home-row-mods-left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39 38 37 36 12 24>;
        };

        mtr: home-row-mods-right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
        };

        smart_dot: smart_dot {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&dot_space>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        smart_dot_ru: smart_dot_ru {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&dot_space_ru>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        smart_comma: smart_comma {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&comma_space>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        smart_comma_ru: smart_comma_ru {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&comma_space_ru>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        html_tag: html_tag {
            compatible = "zmk,behavior-hold-tap";
            label = "HTML_TAG";
            bindings = <&html_tag_close>, <&html_tag_open>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 7 ESC             &kp Q          &kp W         &kp E        &kp R        &kp T          &kp Y        &kp U        &kp I        &kp O         &kp P             &kp LBKT
&mt LC(LA(LCMD)) TAB  &mtl LSHIFT A  &mtl LCTRL S  &mtl LALT D  &mtl LCMD F  &kp G          &kp H        &mtr RCMD J  &mtr RALT K  &mtr RCTRL L  &mtr RSHIFT SEMI  &mt LC(LA(LCMD)) SQT
&lt 5 GRAVE           &mt CAPS Z     &kp X         &kp C        &kp V        &kp B          &kp N        &kp M        &kp COMMA    &kp DOT    &mt QMARK SLASH   &lt 5 BSLH
                                                   &lt 4 BSPC   &lt 3 SPACE  &lt 6 ENTER    &lt 6 ENTER  &lt 3 SPACE  &lt 4 BSPC
            >;

            display-name = "Default";
        };

        ru {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans         &mt RS(NUMBER_8) RS(NUMBER_5)
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &mt QMARK SQT  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            display-name = "Russian";
        };

        game {
            bindings = <
&kp ESC      &kp TAB    &kp Q  &kp W    &kp E      &kp R    &kp Y     &kp U     &kp I      &kp O    &kp P     &kp LBKT
&kp B        &kp LSHFT  &kp A  &kp S    &kp D      &kp F    &kp H     &kp J     &kp K      &kp L    &kp SEMI  &kp SQT
&lt 3 ENTER  &kp LCTRL  &kp Z  &kp X    &kp C      &kp V    &kp N     &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp BSLH
                               &mt H T  &kp SPACE  &kp G    &kp BSPC  &kp LALT  &kp LCMD
            >;

            display-name = "Game";
        };

        num {
            bindings = <
&trans  &none            &kp N7        &kp N8       &kp N9       &mt KP_ASTERISK PLUS    &kp HOME   &kp LA(LEFT)  &kp UP        &kp LA(RIGHT)    &kp END      &none
&trans  &mt LSHIFT SEMI  &mt LCTRL N4  &mt LALT N5  &mt LCMD N6  &mt KP_DIVIDE MINUS     &kp PG_UP  &kp LEFT      &kp DOWN      &kp RIGHT        &none        &none
&trans  &kp KP_EQUAL     &kp N1        &kp N2       &kp N3       &kp N0                  &kp PG_DN  &kp LG(LBKT)  &kp LG(RBKT)  &kp RS(RC(TAB))  &kp RC(TAB)  &trans
                                       &trans       &trans       &none                   &trans     &trans        &trans
            >;

            display-name = "Num / Nav";
        };

        symb {
            bindings = <
&kp F1           &kp F2       &kp F3       &kp F4         &kp F5         &kp F6           &kp EXCL   &kp AT     &kp POUND  &kp DLLR  &kp PERCENT  &trans
&kp F7           &kp F8       &kp F9       &kp F10        &kp F11        &kp F12          &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR     &trans
&mt QMARK SLASH  &mt LT LPAR  &mt GT RPAR  &mt LBRC LBKT  &mt RBRC RBKT  &mt PIPE BSLH    &kp MINUS  &kp UNDER  &kp EQUAL  &kp PLUS  &kp QMARK    &kp PIPE
                                           &trans         &trans         &trans           &trans     &trans     &trans
            >;

            display-name = "FN + Symbols / Numbers";
        };

        media {
            bindings = <
&none  &kp LS(LG(N1))  &kp LS(LG(N2))  &kp LG(LS(N3))  &kp LS(LG(N4))  &kp LS(LG(N5))    &none  &none  &none    &playnp  &kp C_VOL_DN  &kp C_VOL_UP
&none  &kp LC(LEFT)    &kp LC(RIGHT)   &none           &none           &none             &none  &none  &none    &none    &none         &none
&none  &kp LG(Z)       &kp LG(LS(Z))   &none           &none           &none             &none  &none  &none    &none    &none         &none
                                       &kp DEL         &none           &none             &none  &none  &kp DEL
            >;

            display-name = "Shortcuts / Media";
        };

        sticky {
            bindings = <
&none             &none       &kp LG(LEFT)  &kp LG(RIGHT)  &kp LG(R)  &kp LG(T)    &none  &none     &none     &none      &none       &none
&sk LC(LA(LCMD))  &sk LSHIFT  &sk LCTRL     &sk LALT       &sk LCMD   &kp LG(G)    &none  &sk RCMD  &sk RALT  &sk RCTRL  &sk RSHIFT  &sk RG(RC(RALT))
&none             &none       &none         &none          &none      &none        &none  &none     &none     &none      &none       &none
                                            &ru_off        &ru_on     &none        &none  &ru_on    &ru_off
            >;

            display-name = "Sticky mods + Shortcuts";
        };

        system {
            bindings = <
&none      &none  &none  &none      &none        &none         &bt BT_PRV     &bt BT_NXT     &none          &none           &none  &none
&none      &none  &none  &none      &none        &none         &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &none           &none  &ext_power EP_OFF
&soft_off  &none  &none  &none      &none        &none         &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_CLR_ALL  &none  &studio_unlock
                         &upd_fw_l  &bootloader  &check_bat    &check_bat     &bootloader    &upd_fw_r
            >;

            display-name = "System";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
